// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: umgmt/v1alpha1/sensor.proto

package umgmtv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SensorType int32

const (
	SensorType_SENSOR_TYPE_UNSPECIFIED SensorType = 0
	SensorType_SENSOR_TYPE_TEMPERATURE SensorType = 1
	SensorType_SENSOR_TYPE_FAN         SensorType = 2
	SensorType_SENSOR_TYPE_VOLTAGE     SensorType = 3
	SensorType_SENSOR_TYPE_CURRENT     SensorType = 4
	SensorType_SENSOR_TYPE_POWER       SensorType = 5
	SensorType_SENSOR_TYPE_ENERGY      SensorType = 6
	SensorType_SENSOR_TYPE_HUMIDITY    SensorType = 7
	SensorType_SENSOR_TYPE_AIRFLOW     SensorType = 8
	SensorType_SENSOR_TYPE_PERCENTAGE  SensorType = 9
	SensorType_SENSOR_TYPE_CAPACITY    SensorType = 10
	SensorType_SENSOR_TYPE_FREQUENCY   SensorType = 11
	SensorType_SENSOR_TYPE_BINARY      SensorType = 12
)

// Enum value maps for SensorType.
var (
	SensorType_name = map[int32]string{
		0:  "SENSOR_TYPE_UNSPECIFIED",
		1:  "SENSOR_TYPE_TEMPERATURE",
		2:  "SENSOR_TYPE_FAN",
		3:  "SENSOR_TYPE_VOLTAGE",
		4:  "SENSOR_TYPE_CURRENT",
		5:  "SENSOR_TYPE_POWER",
		6:  "SENSOR_TYPE_ENERGY",
		7:  "SENSOR_TYPE_HUMIDITY",
		8:  "SENSOR_TYPE_AIRFLOW",
		9:  "SENSOR_TYPE_PERCENTAGE",
		10: "SENSOR_TYPE_CAPACITY",
		11: "SENSOR_TYPE_FREQUENCY",
		12: "SENSOR_TYPE_BINARY",
	}
	SensorType_value = map[string]int32{
		"SENSOR_TYPE_UNSPECIFIED": 0,
		"SENSOR_TYPE_TEMPERATURE": 1,
		"SENSOR_TYPE_FAN":         2,
		"SENSOR_TYPE_VOLTAGE":     3,
		"SENSOR_TYPE_CURRENT":     4,
		"SENSOR_TYPE_POWER":       5,
		"SENSOR_TYPE_ENERGY":      6,
		"SENSOR_TYPE_HUMIDITY":    7,
		"SENSOR_TYPE_AIRFLOW":     8,
		"SENSOR_TYPE_PERCENTAGE":  9,
		"SENSOR_TYPE_CAPACITY":    10,
		"SENSOR_TYPE_FREQUENCY":   11,
		"SENSOR_TYPE_BINARY":      12,
	}
)

func (x SensorType) Enum() *SensorType {
	p := new(SensorType)
	*p = x
	return p
}

func (x SensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_umgmt_v1alpha1_sensor_proto_enumTypes[0].Descriptor()
}

func (SensorType) Type() protoreflect.EnumType {
	return &file_umgmt_v1alpha1_sensor_proto_enumTypes[0]
}

func (x SensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorType.Descriptor instead.
func (SensorType) EnumDescriptor() ([]byte, []int) {
	return file_umgmt_v1alpha1_sensor_proto_rawDescGZIP(), []int{0}
}

type MeasurementUnit int32

const (
	MeasurementUnit_MEASUREMENT_UNIT_UNSPECIFIED MeasurementUnit = 0
	MeasurementUnit_MEASUREMENT_UNIT_CELSIUS     MeasurementUnit = 1
	MeasurementUnit_MEASUREMENT_UNIT_RPM         MeasurementUnit = 2
	MeasurementUnit_MEASUREMENT_UNIT_VOLTS       MeasurementUnit = 3
	MeasurementUnit_MEASUREMENT_UNIT_AMPS        MeasurementUnit = 4
	MeasurementUnit_MEASUREMENT_UNIT_WATTS       MeasurementUnit = 5
	MeasurementUnit_MEASUREMENT_UNIT_JOULES      MeasurementUnit = 6
	MeasurementUnit_MEASUREMENT_UNIT_PERCENT     MeasurementUnit = 7
	MeasurementUnit_MEASUREMENT_UNIT_CMM         MeasurementUnit = 8
	MeasurementUnit_MEASUREMENT_UNIT_HZ          MeasurementUnit = 9
	MeasurementUnit_MEASUREMENT_UNIT_RH          MeasurementUnit = 10
)

// Enum value maps for MeasurementUnit.
var (
	MeasurementUnit_name = map[int32]string{
		0:  "MEASUREMENT_UNIT_UNSPECIFIED",
		1:  "MEASUREMENT_UNIT_CELSIUS",
		2:  "MEASUREMENT_UNIT_RPM",
		3:  "MEASUREMENT_UNIT_VOLTS",
		4:  "MEASUREMENT_UNIT_AMPS",
		5:  "MEASUREMENT_UNIT_WATTS",
		6:  "MEASUREMENT_UNIT_JOULES",
		7:  "MEASUREMENT_UNIT_PERCENT",
		8:  "MEASUREMENT_UNIT_CMM",
		9:  "MEASUREMENT_UNIT_HZ",
		10: "MEASUREMENT_UNIT_RH",
	}
	MeasurementUnit_value = map[string]int32{
		"MEASUREMENT_UNIT_UNSPECIFIED": 0,
		"MEASUREMENT_UNIT_CELSIUS":     1,
		"MEASUREMENT_UNIT_RPM":         2,
		"MEASUREMENT_UNIT_VOLTS":       3,
		"MEASUREMENT_UNIT_AMPS":        4,
		"MEASUREMENT_UNIT_WATTS":       5,
		"MEASUREMENT_UNIT_JOULES":      6,
		"MEASUREMENT_UNIT_PERCENT":     7,
		"MEASUREMENT_UNIT_CMM":         8,
		"MEASUREMENT_UNIT_HZ":          9,
		"MEASUREMENT_UNIT_RH":          10,
	}
)

func (x MeasurementUnit) Enum() *MeasurementUnit {
	p := new(MeasurementUnit)
	*p = x
	return p
}

func (x MeasurementUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasurementUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_umgmt_v1alpha1_sensor_proto_enumTypes[1].Descriptor()
}

func (MeasurementUnit) Type() protoreflect.EnumType {
	return &file_umgmt_v1alpha1_sensor_proto_enumTypes[1]
}

func (x MeasurementUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasurementUnit.Descriptor instead.
func (MeasurementUnit) EnumDescriptor() ([]byte, []int) {
	return file_umgmt_v1alpha1_sensor_proto_rawDescGZIP(), []int{1}
}

type FanProfile int32

const (
	FanProfile_FAN_PROFILE_UNSPECIFIED FanProfile = 0
	FanProfile_FAN_PROFILE_SILENT      FanProfile = 1
	FanProfile_FAN_PROFILE_BALANCED    FanProfile = 2
	FanProfile_FAN_PROFILE_PERFORMANCE FanProfile = 3
	FanProfile_FAN_PROFILE_FULL_SPEED  FanProfile = 4
)

// Enum value maps for FanProfile.
var (
	FanProfile_name = map[int32]string{
		0: "FAN_PROFILE_UNSPECIFIED",
		1: "FAN_PROFILE_SILENT",
		2: "FAN_PROFILE_BALANCED",
		3: "FAN_PROFILE_PERFORMANCE",
		4: "FAN_PROFILE_FULL_SPEED",
	}
	FanProfile_value = map[string]int32{
		"FAN_PROFILE_UNSPECIFIED": 0,
		"FAN_PROFILE_SILENT":      1,
		"FAN_PROFILE_BALANCED":    2,
		"FAN_PROFILE_PERFORMANCE": 3,
		"FAN_PROFILE_FULL_SPEED":  4,
	}
)

func (x FanProfile) Enum() *FanProfile {
	p := new(FanProfile)
	*p = x
	return p
}

func (x FanProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_umgmt_v1alpha1_sensor_proto_enumTypes[2].Descriptor()
}

func (FanProfile) Type() protoreflect.EnumType {
	return &file_umgmt_v1alpha1_sensor_proto_enumTypes[2]
}

func (x FanProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanProfile.Descriptor instead.
func (FanProfile) EnumDescriptor() ([]byte, []int) {
	return file_umgmt_v1alpha1_sensor_proto_rawDescGZIP(), []int{2}
}

type Threshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerCritical    int32 `protobuf:"varint,1,opt,name=lower_critical,json=lowerCritical,proto3" json:"lower_critical,omitempty"`
	LowerNonCritical int32 `protobuf:"varint,2,opt,name=lower_non_critical,json=lowerNonCritical,proto3" json:"lower_non_critical,omitempty"`
	UpperNonCritical int32 `protobuf:"varint,3,opt,name=upper_non_critical,json=upperNonCritical,proto3" json:"upper_non_critical,omitempty"`
	UpperCritical    int32 `protobuf:"varint,4,opt,name=upper_critical,json=upperCritical,proto3" json:"upper_critical,omitempty"`
}

func (x *Threshold) Reset() {
	*x = Threshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umgmt_v1alpha1_sensor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Threshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Threshold) ProtoMessage() {}

func (x *Threshold) ProtoReflect() protoreflect.Message {
	mi := &file_umgmt_v1alpha1_sensor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Threshold.ProtoReflect.Descriptor instead.
func (*Threshold) Descriptor() ([]byte, []int) {
	return file_umgmt_v1alpha1_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *Threshold) GetLowerCritical() int32 {
	if x != nil {
		return x.LowerCritical
	}
	return 0
}

func (x *Threshold) GetLowerNonCritical() int32 {
	if x != nil {
		return x.LowerNonCritical
	}
	return 0
}

func (x *Threshold) GetUpperNonCritical() int32 {
	if x != nil {
		return x.UpperNonCritical
	}
	return 0
}

func (x *Threshold) GetUpperCritical() int32 {
	if x != nil {
		return x.UpperCritical
	}
	return 0
}

type Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        SensorType             `protobuf:"varint,2,opt,name=type,proto3,enum=umgmt.v1alpha1.SensorType" json:"type,omitempty"`
	Unit        MeasurementUnit        `protobuf:"varint,3,opt,name=unit,proto3,enum=umgmt.v1alpha1.MeasurementUnit" json:"unit,omitempty"`
	Threshold   *Threshold             `protobuf:"bytes,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Value       int32                  `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umgmt_v1alpha1_sensor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_umgmt_v1alpha1_sensor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_umgmt_v1alpha1_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sensor) GetType() SensorType {
	if x != nil {
		return x.Type
	}
	return SensorType_SENSOR_TYPE_UNSPECIFIED
}

func (x *Sensor) GetUnit() MeasurementUnit {
	if x != nil {
		return x.Unit
	}
	return MeasurementUnit_MEASUREMENT_UNIT_UNSPECIFIED
}

func (x *Sensor) GetThreshold() *Threshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *Sensor) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Sensor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sensor) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ChangeFanProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanProfile FanProfile `protobuf:"varint,1,opt,name=fan_profile,json=fanProfile,proto3,enum=umgmt.v1alpha1.FanProfile" json:"fan_profile,omitempty"`
}

func (x *ChangeFanProfilesRequest) Reset() {
	*x = ChangeFanProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umgmt_v1alpha1_sensor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeFanProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeFanProfilesRequest) ProtoMessage() {}

func (x *ChangeFanProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umgmt_v1alpha1_sensor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeFanProfilesRequest.ProtoReflect.Descriptor instead.
func (*ChangeFanProfilesRequest) Descriptor() ([]byte, []int) {
	return file_umgmt_v1alpha1_sensor_proto_rawDescGZIP(), []int{2}
}

func (x *ChangeFanProfilesRequest) GetFanProfile() FanProfile {
	if x != nil {
		return x.FanProfile
	}
	return FanProfile_FAN_PROFILE_UNSPECIFIED
}

type ChangeFanProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeFanProfilesResponse) Reset() {
	*x = ChangeFanProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_umgmt_v1alpha1_sensor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeFanProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeFanProfilesResponse) ProtoMessage() {}

func (x *ChangeFanProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umgmt_v1alpha1_sensor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeFanProfilesResponse.ProtoReflect.Descriptor instead.
func (*ChangeFanProfilesResponse) Descriptor() ([]byte, []int) {
	return file_umgmt_v1alpha1_sensor_proto_rawDescGZIP(), []int{3}
}

var File_umgmt_v1alpha1_sensor_proto protoreflect.FileDescriptor

var file_umgmt_v1alpha1_sensor_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x75, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x75,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb5, 0x01, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0xad, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x75, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x75, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x61, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x66, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xd8,
	0x02, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45,
	0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x4e, 0x53, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x4d,
	0x49, 0x44, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x4e, 0x53, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x08,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x41,
	0x43, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x0b, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x0c, 0x2a, 0xc5, 0x02, 0x0a, 0x0f, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x53, 0x49, 0x55, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x52, 0x50, 0x4d, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x54,
	0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x50, 0x53, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x57, 0x41, 0x54, 0x54, 0x53, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4a,
	0x4f, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4d, 0x4d, 0x10, 0x08, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x48, 0x5a, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x48, 0x10,
	0x0a, 0x2a, 0x94, 0x01, 0x0a, 0x0a, 0x46, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x4c,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x46, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x04, 0x42, 0xba, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x2e, 0x75, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x0b, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x2d, 0x62, 0x6d, 0x63,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x75, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x3b, 0x75, 0x6d, 0x67, 0x6d, 0x74, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02,
	0x03, 0x55, 0x58, 0x58, 0xaa, 0x02, 0x0e, 0x55, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x0e, 0x55, 0x6d, 0x67, 0x6d, 0x74, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x1a, 0x55, 0x6d, 0x67, 0x6d, 0x74, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x55, 0x6d, 0x67, 0x6d, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_umgmt_v1alpha1_sensor_proto_rawDescOnce sync.Once
	file_umgmt_v1alpha1_sensor_proto_rawDescData = file_umgmt_v1alpha1_sensor_proto_rawDesc
)

func file_umgmt_v1alpha1_sensor_proto_rawDescGZIP() []byte {
	file_umgmt_v1alpha1_sensor_proto_rawDescOnce.Do(func() {
		file_umgmt_v1alpha1_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(file_umgmt_v1alpha1_sensor_proto_rawDescData)
	})
	return file_umgmt_v1alpha1_sensor_proto_rawDescData
}

var file_umgmt_v1alpha1_sensor_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_umgmt_v1alpha1_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_umgmt_v1alpha1_sensor_proto_goTypes = []interface{}{
	(SensorType)(0),                   // 0: umgmt.v1alpha1.SensorType
	(MeasurementUnit)(0),              // 1: umgmt.v1alpha1.MeasurementUnit
	(FanProfile)(0),                   // 2: umgmt.v1alpha1.FanProfile
	(*Threshold)(nil),                 // 3: umgmt.v1alpha1.Threshold
	(*Sensor)(nil),                    // 4: umgmt.v1alpha1.Sensor
	(*ChangeFanProfilesRequest)(nil),  // 5: umgmt.v1alpha1.ChangeFanProfilesRequest
	(*ChangeFanProfilesResponse)(nil), // 6: umgmt.v1alpha1.ChangeFanProfilesResponse
	(*timestamppb.Timestamp)(nil),     // 7: google.protobuf.Timestamp
}
var file_umgmt_v1alpha1_sensor_proto_depIdxs = []int32{
	0, // 0: umgmt.v1alpha1.Sensor.type:type_name -> umgmt.v1alpha1.SensorType
	1, // 1: umgmt.v1alpha1.Sensor.unit:type_name -> umgmt.v1alpha1.MeasurementUnit
	3, // 2: umgmt.v1alpha1.Sensor.threshold:type_name -> umgmt.v1alpha1.Threshold
	7, // 3: umgmt.v1alpha1.Sensor.updated_at:type_name -> google.protobuf.Timestamp
	2, // 4: umgmt.v1alpha1.ChangeFanProfilesRequest.fan_profile:type_name -> umgmt.v1alpha1.FanProfile
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_umgmt_v1alpha1_sensor_proto_init() }
func file_umgmt_v1alpha1_sensor_proto_init() {
	if File_umgmt_v1alpha1_sensor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_umgmt_v1alpha1_sensor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Threshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umgmt_v1alpha1_sensor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umgmt_v1alpha1_sensor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeFanProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_umgmt_v1alpha1_sensor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeFanProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_umgmt_v1alpha1_sensor_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_umgmt_v1alpha1_sensor_proto_goTypes,
		DependencyIndexes: file_umgmt_v1alpha1_sensor_proto_depIdxs,
		EnumInfos:         file_umgmt_v1alpha1_sensor_proto_enumTypes,
		MessageInfos:      file_umgmt_v1alpha1_sensor_proto_msgTypes,
	}.Build()
	File_umgmt_v1alpha1_sensor_proto = out.File
	file_umgmt_v1alpha1_sensor_proto_rawDesc = nil
	file_umgmt_v1alpha1_sensor_proto_goTypes = nil
	file_umgmt_v1alpha1_sensor_proto_depIdxs = nil
}
