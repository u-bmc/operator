// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file umgmt/v1alpha1/console.proto (package umgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message umgmt.v1alpha1.StreamConsoleRequest
 */
export class StreamConsoleRequest extends Message<StreamConsoleRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<StreamConsoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.StreamConsoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamConsoleRequest {
    return new StreamConsoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamConsoleRequest {
    return new StreamConsoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamConsoleRequest {
    return new StreamConsoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamConsoleRequest | PlainMessage<StreamConsoleRequest> | undefined, b: StreamConsoleRequest | PlainMessage<StreamConsoleRequest> | undefined): boolean {
    return proto3.util.equals(StreamConsoleRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.StreamConsoleResponse
 */
export class StreamConsoleResponse extends Message<StreamConsoleResponse> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<StreamConsoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.StreamConsoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamConsoleResponse {
    return new StreamConsoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamConsoleResponse {
    return new StreamConsoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamConsoleResponse {
    return new StreamConsoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamConsoleResponse | PlainMessage<StreamConsoleResponse> | undefined, b: StreamConsoleResponse | PlainMessage<StreamConsoleResponse> | undefined): boolean {
    return proto3.util.equals(StreamConsoleResponse, a, b);
  }
}

