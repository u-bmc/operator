// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: umgmt/v1alpha1/umgmt.proto

package umgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/u-bmc/operator/api/gen/umgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UmgmtServiceName is the fully-qualified name of the UmgmtService service.
	UmgmtServiceName = "umgmt.v1alpha1.UmgmtService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UmgmtServiceListUsersProcedure is the fully-qualified name of the UmgmtService's ListUsers RPC.
	UmgmtServiceListUsersProcedure = "/umgmt.v1alpha1.UmgmtService/ListUsers"
	// UmgmtServiceGetUserInfoProcedure is the fully-qualified name of the UmgmtService's GetUserInfo
	// RPC.
	UmgmtServiceGetUserInfoProcedure = "/umgmt.v1alpha1.UmgmtService/GetUserInfo"
	// UmgmtServiceUpdateUserProcedure is the fully-qualified name of the UmgmtService's UpdateUser RPC.
	UmgmtServiceUpdateUserProcedure = "/umgmt.v1alpha1.UmgmtService/UpdateUser"
	// UmgmtServiceDeleteUserProcedure is the fully-qualified name of the UmgmtService's DeleteUser RPC.
	UmgmtServiceDeleteUserProcedure = "/umgmt.v1alpha1.UmgmtService/DeleteUser"
	// UmgmtServiceListInventoryProcedure is the fully-qualified name of the UmgmtService's
	// ListInventory RPC.
	UmgmtServiceListInventoryProcedure = "/umgmt.v1alpha1.UmgmtService/ListInventory"
	// UmgmtServiceGetChassisInfoProcedure is the fully-qualified name of the UmgmtService's
	// GetChassisInfo RPC.
	UmgmtServiceGetChassisInfoProcedure = "/umgmt.v1alpha1.UmgmtService/GetChassisInfo"
	// UmgmtServiceChangeSystemStateProcedure is the fully-qualified name of the UmgmtService's
	// ChangeSystemState RPC.
	UmgmtServiceChangeSystemStateProcedure = "/umgmt.v1alpha1.UmgmtService/ChangeSystemState"
	// UmgmtServiceStreamConsoleProcedure is the fully-qualified name of the UmgmtService's
	// StreamConsole RPC.
	UmgmtServiceStreamConsoleProcedure = "/umgmt.v1alpha1.UmgmtService/StreamConsole"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	umgmtServiceServiceDescriptor                 = v1alpha1.File_umgmt_v1alpha1_umgmt_proto.Services().ByName("UmgmtService")
	umgmtServiceListUsersMethodDescriptor         = umgmtServiceServiceDescriptor.Methods().ByName("ListUsers")
	umgmtServiceGetUserInfoMethodDescriptor       = umgmtServiceServiceDescriptor.Methods().ByName("GetUserInfo")
	umgmtServiceUpdateUserMethodDescriptor        = umgmtServiceServiceDescriptor.Methods().ByName("UpdateUser")
	umgmtServiceDeleteUserMethodDescriptor        = umgmtServiceServiceDescriptor.Methods().ByName("DeleteUser")
	umgmtServiceListInventoryMethodDescriptor     = umgmtServiceServiceDescriptor.Methods().ByName("ListInventory")
	umgmtServiceGetChassisInfoMethodDescriptor    = umgmtServiceServiceDescriptor.Methods().ByName("GetChassisInfo")
	umgmtServiceChangeSystemStateMethodDescriptor = umgmtServiceServiceDescriptor.Methods().ByName("ChangeSystemState")
	umgmtServiceStreamConsoleMethodDescriptor     = umgmtServiceServiceDescriptor.Methods().ByName("StreamConsole")
)

// UmgmtServiceClient is a client for the umgmt.v1alpha1.UmgmtService service.
type UmgmtServiceClient interface {
	ListUsers(context.Context, *connect.Request[v1alpha1.ListUsersRequest]) (*connect.Response[v1alpha1.ListUsersResponse], error)
	GetUserInfo(context.Context, *connect.Request[v1alpha1.GetUserInfoRequest]) (*connect.Response[v1alpha1.GetUserInfoResponse], error)
	UpdateUser(context.Context, *connect.Request[v1alpha1.UpdateUserRequest]) (*connect.Response[v1alpha1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1alpha1.DeleteUserRequest]) (*connect.Response[v1alpha1.DeleteUserResponse], error)
	ListInventory(context.Context, *connect.Request[v1alpha1.ListInventoryRequest]) (*connect.Response[v1alpha1.ListInventoryResponse], error)
	GetChassisInfo(context.Context, *connect.Request[v1alpha1.GetChassisInfoRequest]) (*connect.Response[v1alpha1.GetChassisInfoResponse], error)
	ChangeSystemState(context.Context, *connect.Request[v1alpha1.ChangeSystemStateRequest]) (*connect.Response[v1alpha1.ChangeSystemStateResponse], error)
	StreamConsole(context.Context) *connect.BidiStreamForClient[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse]
}

// NewUmgmtServiceClient constructs a client for the umgmt.v1alpha1.UmgmtService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUmgmtServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UmgmtServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &umgmtServiceClient{
		listUsers: connect.NewClient[v1alpha1.ListUsersRequest, v1alpha1.ListUsersResponse](
			httpClient,
			baseURL+UmgmtServiceListUsersProcedure,
			connect.WithSchema(umgmtServiceListUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserInfo: connect.NewClient[v1alpha1.GetUserInfoRequest, v1alpha1.GetUserInfoResponse](
			httpClient,
			baseURL+UmgmtServiceGetUserInfoProcedure,
			connect.WithSchema(umgmtServiceGetUserInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1alpha1.UpdateUserRequest, v1alpha1.UpdateUserResponse](
			httpClient,
			baseURL+UmgmtServiceUpdateUserProcedure,
			connect.WithSchema(umgmtServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1alpha1.DeleteUserRequest, v1alpha1.DeleteUserResponse](
			httpClient,
			baseURL+UmgmtServiceDeleteUserProcedure,
			connect.WithSchema(umgmtServiceDeleteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listInventory: connect.NewClient[v1alpha1.ListInventoryRequest, v1alpha1.ListInventoryResponse](
			httpClient,
			baseURL+UmgmtServiceListInventoryProcedure,
			connect.WithSchema(umgmtServiceListInventoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChassisInfo: connect.NewClient[v1alpha1.GetChassisInfoRequest, v1alpha1.GetChassisInfoResponse](
			httpClient,
			baseURL+UmgmtServiceGetChassisInfoProcedure,
			connect.WithSchema(umgmtServiceGetChassisInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeSystemState: connect.NewClient[v1alpha1.ChangeSystemStateRequest, v1alpha1.ChangeSystemStateResponse](
			httpClient,
			baseURL+UmgmtServiceChangeSystemStateProcedure,
			connect.WithSchema(umgmtServiceChangeSystemStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamConsole: connect.NewClient[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse](
			httpClient,
			baseURL+UmgmtServiceStreamConsoleProcedure,
			connect.WithSchema(umgmtServiceStreamConsoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// umgmtServiceClient implements UmgmtServiceClient.
type umgmtServiceClient struct {
	listUsers         *connect.Client[v1alpha1.ListUsersRequest, v1alpha1.ListUsersResponse]
	getUserInfo       *connect.Client[v1alpha1.GetUserInfoRequest, v1alpha1.GetUserInfoResponse]
	updateUser        *connect.Client[v1alpha1.UpdateUserRequest, v1alpha1.UpdateUserResponse]
	deleteUser        *connect.Client[v1alpha1.DeleteUserRequest, v1alpha1.DeleteUserResponse]
	listInventory     *connect.Client[v1alpha1.ListInventoryRequest, v1alpha1.ListInventoryResponse]
	getChassisInfo    *connect.Client[v1alpha1.GetChassisInfoRequest, v1alpha1.GetChassisInfoResponse]
	changeSystemState *connect.Client[v1alpha1.ChangeSystemStateRequest, v1alpha1.ChangeSystemStateResponse]
	streamConsole     *connect.Client[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse]
}

// ListUsers calls umgmt.v1alpha1.UmgmtService.ListUsers.
func (c *umgmtServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1alpha1.ListUsersRequest]) (*connect.Response[v1alpha1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUserInfo calls umgmt.v1alpha1.UmgmtService.GetUserInfo.
func (c *umgmtServiceClient) GetUserInfo(ctx context.Context, req *connect.Request[v1alpha1.GetUserInfoRequest]) (*connect.Response[v1alpha1.GetUserInfoResponse], error) {
	return c.getUserInfo.CallUnary(ctx, req)
}

// UpdateUser calls umgmt.v1alpha1.UmgmtService.UpdateUser.
func (c *umgmtServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1alpha1.UpdateUserRequest]) (*connect.Response[v1alpha1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls umgmt.v1alpha1.UmgmtService.DeleteUser.
func (c *umgmtServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1alpha1.DeleteUserRequest]) (*connect.Response[v1alpha1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// ListInventory calls umgmt.v1alpha1.UmgmtService.ListInventory.
func (c *umgmtServiceClient) ListInventory(ctx context.Context, req *connect.Request[v1alpha1.ListInventoryRequest]) (*connect.Response[v1alpha1.ListInventoryResponse], error) {
	return c.listInventory.CallUnary(ctx, req)
}

// GetChassisInfo calls umgmt.v1alpha1.UmgmtService.GetChassisInfo.
func (c *umgmtServiceClient) GetChassisInfo(ctx context.Context, req *connect.Request[v1alpha1.GetChassisInfoRequest]) (*connect.Response[v1alpha1.GetChassisInfoResponse], error) {
	return c.getChassisInfo.CallUnary(ctx, req)
}

// ChangeSystemState calls umgmt.v1alpha1.UmgmtService.ChangeSystemState.
func (c *umgmtServiceClient) ChangeSystemState(ctx context.Context, req *connect.Request[v1alpha1.ChangeSystemStateRequest]) (*connect.Response[v1alpha1.ChangeSystemStateResponse], error) {
	return c.changeSystemState.CallUnary(ctx, req)
}

// StreamConsole calls umgmt.v1alpha1.UmgmtService.StreamConsole.
func (c *umgmtServiceClient) StreamConsole(ctx context.Context) *connect.BidiStreamForClient[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse] {
	return c.streamConsole.CallBidiStream(ctx)
}

// UmgmtServiceHandler is an implementation of the umgmt.v1alpha1.UmgmtService service.
type UmgmtServiceHandler interface {
	ListUsers(context.Context, *connect.Request[v1alpha1.ListUsersRequest]) (*connect.Response[v1alpha1.ListUsersResponse], error)
	GetUserInfo(context.Context, *connect.Request[v1alpha1.GetUserInfoRequest]) (*connect.Response[v1alpha1.GetUserInfoResponse], error)
	UpdateUser(context.Context, *connect.Request[v1alpha1.UpdateUserRequest]) (*connect.Response[v1alpha1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1alpha1.DeleteUserRequest]) (*connect.Response[v1alpha1.DeleteUserResponse], error)
	ListInventory(context.Context, *connect.Request[v1alpha1.ListInventoryRequest]) (*connect.Response[v1alpha1.ListInventoryResponse], error)
	GetChassisInfo(context.Context, *connect.Request[v1alpha1.GetChassisInfoRequest]) (*connect.Response[v1alpha1.GetChassisInfoResponse], error)
	ChangeSystemState(context.Context, *connect.Request[v1alpha1.ChangeSystemStateRequest]) (*connect.Response[v1alpha1.ChangeSystemStateResponse], error)
	StreamConsole(context.Context, *connect.BidiStream[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse]) error
}

// NewUmgmtServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUmgmtServiceHandler(svc UmgmtServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	umgmtServiceListUsersHandler := connect.NewUnaryHandler(
		UmgmtServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(umgmtServiceListUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	umgmtServiceGetUserInfoHandler := connect.NewUnaryHandler(
		UmgmtServiceGetUserInfoProcedure,
		svc.GetUserInfo,
		connect.WithSchema(umgmtServiceGetUserInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	umgmtServiceUpdateUserHandler := connect.NewUnaryHandler(
		UmgmtServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(umgmtServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	umgmtServiceDeleteUserHandler := connect.NewUnaryHandler(
		UmgmtServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(umgmtServiceDeleteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	umgmtServiceListInventoryHandler := connect.NewUnaryHandler(
		UmgmtServiceListInventoryProcedure,
		svc.ListInventory,
		connect.WithSchema(umgmtServiceListInventoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	umgmtServiceGetChassisInfoHandler := connect.NewUnaryHandler(
		UmgmtServiceGetChassisInfoProcedure,
		svc.GetChassisInfo,
		connect.WithSchema(umgmtServiceGetChassisInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	umgmtServiceChangeSystemStateHandler := connect.NewUnaryHandler(
		UmgmtServiceChangeSystemStateProcedure,
		svc.ChangeSystemState,
		connect.WithSchema(umgmtServiceChangeSystemStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	umgmtServiceStreamConsoleHandler := connect.NewBidiStreamHandler(
		UmgmtServiceStreamConsoleProcedure,
		svc.StreamConsole,
		connect.WithSchema(umgmtServiceStreamConsoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/umgmt.v1alpha1.UmgmtService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UmgmtServiceListUsersProcedure:
			umgmtServiceListUsersHandler.ServeHTTP(w, r)
		case UmgmtServiceGetUserInfoProcedure:
			umgmtServiceGetUserInfoHandler.ServeHTTP(w, r)
		case UmgmtServiceUpdateUserProcedure:
			umgmtServiceUpdateUserHandler.ServeHTTP(w, r)
		case UmgmtServiceDeleteUserProcedure:
			umgmtServiceDeleteUserHandler.ServeHTTP(w, r)
		case UmgmtServiceListInventoryProcedure:
			umgmtServiceListInventoryHandler.ServeHTTP(w, r)
		case UmgmtServiceGetChassisInfoProcedure:
			umgmtServiceGetChassisInfoHandler.ServeHTTP(w, r)
		case UmgmtServiceChangeSystemStateProcedure:
			umgmtServiceChangeSystemStateHandler.ServeHTTP(w, r)
		case UmgmtServiceStreamConsoleProcedure:
			umgmtServiceStreamConsoleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUmgmtServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUmgmtServiceHandler struct{}

func (UnimplementedUmgmtServiceHandler) ListUsers(context.Context, *connect.Request[v1alpha1.ListUsersRequest]) (*connect.Response[v1alpha1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.ListUsers is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) GetUserInfo(context.Context, *connect.Request[v1alpha1.GetUserInfoRequest]) (*connect.Response[v1alpha1.GetUserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.GetUserInfo is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) UpdateUser(context.Context, *connect.Request[v1alpha1.UpdateUserRequest]) (*connect.Response[v1alpha1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.UpdateUser is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) DeleteUser(context.Context, *connect.Request[v1alpha1.DeleteUserRequest]) (*connect.Response[v1alpha1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.DeleteUser is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) ListInventory(context.Context, *connect.Request[v1alpha1.ListInventoryRequest]) (*connect.Response[v1alpha1.ListInventoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.ListInventory is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) GetChassisInfo(context.Context, *connect.Request[v1alpha1.GetChassisInfoRequest]) (*connect.Response[v1alpha1.GetChassisInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.GetChassisInfo is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) ChangeSystemState(context.Context, *connect.Request[v1alpha1.ChangeSystemStateRequest]) (*connect.Response[v1alpha1.ChangeSystemStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.ChangeSystemState is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) StreamConsole(context.Context, *connect.BidiStream[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.StreamConsole is not implemented"))
}
