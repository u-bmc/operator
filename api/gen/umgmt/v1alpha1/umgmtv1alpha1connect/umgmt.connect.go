// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: umgmt/v1alpha1/umgmt.proto

package umgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/u-bmc/operator/api/gen/umgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// UmgmtServiceName is the fully-qualified name of the UmgmtService service.
	UmgmtServiceName = "umgmt.v1alpha1.UmgmtService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UmgmtServiceGetUsersProcedure is the fully-qualified name of the UmgmtService's GetUsers RPC.
	UmgmtServiceGetUsersProcedure = "/umgmt.v1alpha1.UmgmtService/GetUsers"
	// UmgmtServiceGetUserInfoProcedure is the fully-qualified name of the UmgmtService's GetUserInfo
	// RPC.
	UmgmtServiceGetUserInfoProcedure = "/umgmt.v1alpha1.UmgmtService/GetUserInfo"
	// UmgmtServiceUpdateUserProcedure is the fully-qualified name of the UmgmtService's UpdateUser RPC.
	UmgmtServiceUpdateUserProcedure = "/umgmt.v1alpha1.UmgmtService/UpdateUser"
	// UmgmtServiceGetInventoryProcedure is the fully-qualified name of the UmgmtService's GetInventory
	// RPC.
	UmgmtServiceGetInventoryProcedure = "/umgmt.v1alpha1.UmgmtService/GetInventory"
	// UmgmtServiceGetMachineInfoProcedure is the fully-qualified name of the UmgmtService's
	// GetMachineInfo RPC.
	UmgmtServiceGetMachineInfoProcedure = "/umgmt.v1alpha1.UmgmtService/GetMachineInfo"
	// UmgmtServiceGetMachineStateProcedure is the fully-qualified name of the UmgmtService's
	// GetMachineState RPC.
	UmgmtServiceGetMachineStateProcedure = "/umgmt.v1alpha1.UmgmtService/GetMachineState"
	// UmgmtServiceChangeMachineStateProcedure is the fully-qualified name of the UmgmtService's
	// ChangeMachineState RPC.
	UmgmtServiceChangeMachineStateProcedure = "/umgmt.v1alpha1.UmgmtService/ChangeMachineState"
	// UmgmtServiceGetSensorListProcedure is the fully-qualified name of the UmgmtService's
	// GetSensorList RPC.
	UmgmtServiceGetSensorListProcedure = "/umgmt.v1alpha1.UmgmtService/GetSensorList"
	// UmgmtServiceGetSensorDataProcedure is the fully-qualified name of the UmgmtService's
	// GetSensorData RPC.
	UmgmtServiceGetSensorDataProcedure = "/umgmt.v1alpha1.UmgmtService/GetSensorData"
	// UmgmtServiceStreamHostConsoleProcedure is the fully-qualified name of the UmgmtService's
	// StreamHostConsole RPC.
	UmgmtServiceStreamHostConsoleProcedure = "/umgmt.v1alpha1.UmgmtService/StreamHostConsole"
	// UmgmtServiceConfigureThermalSetPointsProcedure is the fully-qualified name of the UmgmtService's
	// ConfigureThermalSetPoints RPC.
	UmgmtServiceConfigureThermalSetPointsProcedure = "/umgmt.v1alpha1.UmgmtService/ConfigureThermalSetPoints"
	// UmgmtServiceConfigureThermalFanProfilesProcedure is the fully-qualified name of the
	// UmgmtService's ConfigureThermalFanProfiles RPC.
	UmgmtServiceConfigureThermalFanProfilesProcedure = "/umgmt.v1alpha1.UmgmtService/ConfigureThermalFanProfiles"
)

// UmgmtServiceClient is a client for the umgmt.v1alpha1.UmgmtService service.
type UmgmtServiceClient interface {
	GetUsers(context.Context, *connect.Request[v1alpha1.GetUsersRequest]) (*connect.Response[v1alpha1.GetUsersResponse], error)
	GetUserInfo(context.Context, *connect.Request[v1alpha1.GetUserInfoRequest]) (*connect.Response[v1alpha1.GetUserInfoResponse], error)
	UpdateUser(context.Context, *connect.Request[v1alpha1.UpdateUserRequest]) (*connect.Response[v1alpha1.UpdateUserResponse], error)
	GetInventory(context.Context, *connect.Request[v1alpha1.GetInventoryRequest]) (*connect.Response[v1alpha1.GetInventoryResponse], error)
	GetMachineInfo(context.Context, *connect.Request[v1alpha1.GetMachineInfoRequest]) (*connect.Response[v1alpha1.GetMachineInfoResponse], error)
	GetMachineState(context.Context, *connect.Request[v1alpha1.GetMachineStateRequest]) (*connect.Response[v1alpha1.GetMachineStateResponse], error)
	ChangeMachineState(context.Context, *connect.Request[v1alpha1.ChangeMachineStateRequest]) (*connect.Response[v1alpha1.ChangeMachineStateResponse], error)
	GetSensorList(context.Context, *connect.Request[v1alpha1.GetSensorListRequest]) (*connect.Response[v1alpha1.GetSensorListResponse], error)
	GetSensorData(context.Context, *connect.Request[v1alpha1.GetSensorDataRequest]) (*connect.Response[v1alpha1.GetSensorDataResponse], error)
	StreamHostConsole(context.Context) *connect.BidiStreamForClient[v1alpha1.StreamHostConsoleRequest, v1alpha1.StreamHostConsoleResponse]
	ConfigureThermalSetPoints(context.Context, *connect.Request[v1alpha1.ConfigureThermalSetPointsRequest]) (*connect.Response[v1alpha1.ConfigureThermalSetPointsResponse], error)
	ConfigureThermalFanProfiles(context.Context, *connect.Request[v1alpha1.ConfigureThermalFanProfilesRequest]) (*connect.Response[v1alpha1.ConfigureThermalFanProfilesResponse], error)
}

// NewUmgmtServiceClient constructs a client for the umgmt.v1alpha1.UmgmtService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUmgmtServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UmgmtServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &umgmtServiceClient{
		getUsers: connect.NewClient[v1alpha1.GetUsersRequest, v1alpha1.GetUsersResponse](
			httpClient,
			baseURL+UmgmtServiceGetUsersProcedure,
			opts...,
		),
		getUserInfo: connect.NewClient[v1alpha1.GetUserInfoRequest, v1alpha1.GetUserInfoResponse](
			httpClient,
			baseURL+UmgmtServiceGetUserInfoProcedure,
			opts...,
		),
		updateUser: connect.NewClient[v1alpha1.UpdateUserRequest, v1alpha1.UpdateUserResponse](
			httpClient,
			baseURL+UmgmtServiceUpdateUserProcedure,
			opts...,
		),
		getInventory: connect.NewClient[v1alpha1.GetInventoryRequest, v1alpha1.GetInventoryResponse](
			httpClient,
			baseURL+UmgmtServiceGetInventoryProcedure,
			opts...,
		),
		getMachineInfo: connect.NewClient[v1alpha1.GetMachineInfoRequest, v1alpha1.GetMachineInfoResponse](
			httpClient,
			baseURL+UmgmtServiceGetMachineInfoProcedure,
			opts...,
		),
		getMachineState: connect.NewClient[v1alpha1.GetMachineStateRequest, v1alpha1.GetMachineStateResponse](
			httpClient,
			baseURL+UmgmtServiceGetMachineStateProcedure,
			opts...,
		),
		changeMachineState: connect.NewClient[v1alpha1.ChangeMachineStateRequest, v1alpha1.ChangeMachineStateResponse](
			httpClient,
			baseURL+UmgmtServiceChangeMachineStateProcedure,
			opts...,
		),
		getSensorList: connect.NewClient[v1alpha1.GetSensorListRequest, v1alpha1.GetSensorListResponse](
			httpClient,
			baseURL+UmgmtServiceGetSensorListProcedure,
			opts...,
		),
		getSensorData: connect.NewClient[v1alpha1.GetSensorDataRequest, v1alpha1.GetSensorDataResponse](
			httpClient,
			baseURL+UmgmtServiceGetSensorDataProcedure,
			opts...,
		),
		streamHostConsole: connect.NewClient[v1alpha1.StreamHostConsoleRequest, v1alpha1.StreamHostConsoleResponse](
			httpClient,
			baseURL+UmgmtServiceStreamHostConsoleProcedure,
			opts...,
		),
		configureThermalSetPoints: connect.NewClient[v1alpha1.ConfigureThermalSetPointsRequest, v1alpha1.ConfigureThermalSetPointsResponse](
			httpClient,
			baseURL+UmgmtServiceConfigureThermalSetPointsProcedure,
			opts...,
		),
		configureThermalFanProfiles: connect.NewClient[v1alpha1.ConfigureThermalFanProfilesRequest, v1alpha1.ConfigureThermalFanProfilesResponse](
			httpClient,
			baseURL+UmgmtServiceConfigureThermalFanProfilesProcedure,
			opts...,
		),
	}
}

// umgmtServiceClient implements UmgmtServiceClient.
type umgmtServiceClient struct {
	getUsers                    *connect.Client[v1alpha1.GetUsersRequest, v1alpha1.GetUsersResponse]
	getUserInfo                 *connect.Client[v1alpha1.GetUserInfoRequest, v1alpha1.GetUserInfoResponse]
	updateUser                  *connect.Client[v1alpha1.UpdateUserRequest, v1alpha1.UpdateUserResponse]
	getInventory                *connect.Client[v1alpha1.GetInventoryRequest, v1alpha1.GetInventoryResponse]
	getMachineInfo              *connect.Client[v1alpha1.GetMachineInfoRequest, v1alpha1.GetMachineInfoResponse]
	getMachineState             *connect.Client[v1alpha1.GetMachineStateRequest, v1alpha1.GetMachineStateResponse]
	changeMachineState          *connect.Client[v1alpha1.ChangeMachineStateRequest, v1alpha1.ChangeMachineStateResponse]
	getSensorList               *connect.Client[v1alpha1.GetSensorListRequest, v1alpha1.GetSensorListResponse]
	getSensorData               *connect.Client[v1alpha1.GetSensorDataRequest, v1alpha1.GetSensorDataResponse]
	streamHostConsole           *connect.Client[v1alpha1.StreamHostConsoleRequest, v1alpha1.StreamHostConsoleResponse]
	configureThermalSetPoints   *connect.Client[v1alpha1.ConfigureThermalSetPointsRequest, v1alpha1.ConfigureThermalSetPointsResponse]
	configureThermalFanProfiles *connect.Client[v1alpha1.ConfigureThermalFanProfilesRequest, v1alpha1.ConfigureThermalFanProfilesResponse]
}

// GetUsers calls umgmt.v1alpha1.UmgmtService.GetUsers.
func (c *umgmtServiceClient) GetUsers(ctx context.Context, req *connect.Request[v1alpha1.GetUsersRequest]) (*connect.Response[v1alpha1.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// GetUserInfo calls umgmt.v1alpha1.UmgmtService.GetUserInfo.
func (c *umgmtServiceClient) GetUserInfo(ctx context.Context, req *connect.Request[v1alpha1.GetUserInfoRequest]) (*connect.Response[v1alpha1.GetUserInfoResponse], error) {
	return c.getUserInfo.CallUnary(ctx, req)
}

// UpdateUser calls umgmt.v1alpha1.UmgmtService.UpdateUser.
func (c *umgmtServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1alpha1.UpdateUserRequest]) (*connect.Response[v1alpha1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// GetInventory calls umgmt.v1alpha1.UmgmtService.GetInventory.
func (c *umgmtServiceClient) GetInventory(ctx context.Context, req *connect.Request[v1alpha1.GetInventoryRequest]) (*connect.Response[v1alpha1.GetInventoryResponse], error) {
	return c.getInventory.CallUnary(ctx, req)
}

// GetMachineInfo calls umgmt.v1alpha1.UmgmtService.GetMachineInfo.
func (c *umgmtServiceClient) GetMachineInfo(ctx context.Context, req *connect.Request[v1alpha1.GetMachineInfoRequest]) (*connect.Response[v1alpha1.GetMachineInfoResponse], error) {
	return c.getMachineInfo.CallUnary(ctx, req)
}

// GetMachineState calls umgmt.v1alpha1.UmgmtService.GetMachineState.
func (c *umgmtServiceClient) GetMachineState(ctx context.Context, req *connect.Request[v1alpha1.GetMachineStateRequest]) (*connect.Response[v1alpha1.GetMachineStateResponse], error) {
	return c.getMachineState.CallUnary(ctx, req)
}

// ChangeMachineState calls umgmt.v1alpha1.UmgmtService.ChangeMachineState.
func (c *umgmtServiceClient) ChangeMachineState(ctx context.Context, req *connect.Request[v1alpha1.ChangeMachineStateRequest]) (*connect.Response[v1alpha1.ChangeMachineStateResponse], error) {
	return c.changeMachineState.CallUnary(ctx, req)
}

// GetSensorList calls umgmt.v1alpha1.UmgmtService.GetSensorList.
func (c *umgmtServiceClient) GetSensorList(ctx context.Context, req *connect.Request[v1alpha1.GetSensorListRequest]) (*connect.Response[v1alpha1.GetSensorListResponse], error) {
	return c.getSensorList.CallUnary(ctx, req)
}

// GetSensorData calls umgmt.v1alpha1.UmgmtService.GetSensorData.
func (c *umgmtServiceClient) GetSensorData(ctx context.Context, req *connect.Request[v1alpha1.GetSensorDataRequest]) (*connect.Response[v1alpha1.GetSensorDataResponse], error) {
	return c.getSensorData.CallUnary(ctx, req)
}

// StreamHostConsole calls umgmt.v1alpha1.UmgmtService.StreamHostConsole.
func (c *umgmtServiceClient) StreamHostConsole(ctx context.Context) *connect.BidiStreamForClient[v1alpha1.StreamHostConsoleRequest, v1alpha1.StreamHostConsoleResponse] {
	return c.streamHostConsole.CallBidiStream(ctx)
}

// ConfigureThermalSetPoints calls umgmt.v1alpha1.UmgmtService.ConfigureThermalSetPoints.
func (c *umgmtServiceClient) ConfigureThermalSetPoints(ctx context.Context, req *connect.Request[v1alpha1.ConfigureThermalSetPointsRequest]) (*connect.Response[v1alpha1.ConfigureThermalSetPointsResponse], error) {
	return c.configureThermalSetPoints.CallUnary(ctx, req)
}

// ConfigureThermalFanProfiles calls umgmt.v1alpha1.UmgmtService.ConfigureThermalFanProfiles.
func (c *umgmtServiceClient) ConfigureThermalFanProfiles(ctx context.Context, req *connect.Request[v1alpha1.ConfigureThermalFanProfilesRequest]) (*connect.Response[v1alpha1.ConfigureThermalFanProfilesResponse], error) {
	return c.configureThermalFanProfiles.CallUnary(ctx, req)
}

// UmgmtServiceHandler is an implementation of the umgmt.v1alpha1.UmgmtService service.
type UmgmtServiceHandler interface {
	GetUsers(context.Context, *connect.Request[v1alpha1.GetUsersRequest]) (*connect.Response[v1alpha1.GetUsersResponse], error)
	GetUserInfo(context.Context, *connect.Request[v1alpha1.GetUserInfoRequest]) (*connect.Response[v1alpha1.GetUserInfoResponse], error)
	UpdateUser(context.Context, *connect.Request[v1alpha1.UpdateUserRequest]) (*connect.Response[v1alpha1.UpdateUserResponse], error)
	GetInventory(context.Context, *connect.Request[v1alpha1.GetInventoryRequest]) (*connect.Response[v1alpha1.GetInventoryResponse], error)
	GetMachineInfo(context.Context, *connect.Request[v1alpha1.GetMachineInfoRequest]) (*connect.Response[v1alpha1.GetMachineInfoResponse], error)
	GetMachineState(context.Context, *connect.Request[v1alpha1.GetMachineStateRequest]) (*connect.Response[v1alpha1.GetMachineStateResponse], error)
	ChangeMachineState(context.Context, *connect.Request[v1alpha1.ChangeMachineStateRequest]) (*connect.Response[v1alpha1.ChangeMachineStateResponse], error)
	GetSensorList(context.Context, *connect.Request[v1alpha1.GetSensorListRequest]) (*connect.Response[v1alpha1.GetSensorListResponse], error)
	GetSensorData(context.Context, *connect.Request[v1alpha1.GetSensorDataRequest]) (*connect.Response[v1alpha1.GetSensorDataResponse], error)
	StreamHostConsole(context.Context, *connect.BidiStream[v1alpha1.StreamHostConsoleRequest, v1alpha1.StreamHostConsoleResponse]) error
	ConfigureThermalSetPoints(context.Context, *connect.Request[v1alpha1.ConfigureThermalSetPointsRequest]) (*connect.Response[v1alpha1.ConfigureThermalSetPointsResponse], error)
	ConfigureThermalFanProfiles(context.Context, *connect.Request[v1alpha1.ConfigureThermalFanProfilesRequest]) (*connect.Response[v1alpha1.ConfigureThermalFanProfilesResponse], error)
}

// NewUmgmtServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUmgmtServiceHandler(svc UmgmtServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	umgmtServiceGetUsersHandler := connect.NewUnaryHandler(
		UmgmtServiceGetUsersProcedure,
		svc.GetUsers,
		opts...,
	)
	umgmtServiceGetUserInfoHandler := connect.NewUnaryHandler(
		UmgmtServiceGetUserInfoProcedure,
		svc.GetUserInfo,
		opts...,
	)
	umgmtServiceUpdateUserHandler := connect.NewUnaryHandler(
		UmgmtServiceUpdateUserProcedure,
		svc.UpdateUser,
		opts...,
	)
	umgmtServiceGetInventoryHandler := connect.NewUnaryHandler(
		UmgmtServiceGetInventoryProcedure,
		svc.GetInventory,
		opts...,
	)
	umgmtServiceGetMachineInfoHandler := connect.NewUnaryHandler(
		UmgmtServiceGetMachineInfoProcedure,
		svc.GetMachineInfo,
		opts...,
	)
	umgmtServiceGetMachineStateHandler := connect.NewUnaryHandler(
		UmgmtServiceGetMachineStateProcedure,
		svc.GetMachineState,
		opts...,
	)
	umgmtServiceChangeMachineStateHandler := connect.NewUnaryHandler(
		UmgmtServiceChangeMachineStateProcedure,
		svc.ChangeMachineState,
		opts...,
	)
	umgmtServiceGetSensorListHandler := connect.NewUnaryHandler(
		UmgmtServiceGetSensorListProcedure,
		svc.GetSensorList,
		opts...,
	)
	umgmtServiceGetSensorDataHandler := connect.NewUnaryHandler(
		UmgmtServiceGetSensorDataProcedure,
		svc.GetSensorData,
		opts...,
	)
	umgmtServiceStreamHostConsoleHandler := connect.NewBidiStreamHandler(
		UmgmtServiceStreamHostConsoleProcedure,
		svc.StreamHostConsole,
		opts...,
	)
	umgmtServiceConfigureThermalSetPointsHandler := connect.NewUnaryHandler(
		UmgmtServiceConfigureThermalSetPointsProcedure,
		svc.ConfigureThermalSetPoints,
		opts...,
	)
	umgmtServiceConfigureThermalFanProfilesHandler := connect.NewUnaryHandler(
		UmgmtServiceConfigureThermalFanProfilesProcedure,
		svc.ConfigureThermalFanProfiles,
		opts...,
	)
	return "/umgmt.v1alpha1.UmgmtService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UmgmtServiceGetUsersProcedure:
			umgmtServiceGetUsersHandler.ServeHTTP(w, r)
		case UmgmtServiceGetUserInfoProcedure:
			umgmtServiceGetUserInfoHandler.ServeHTTP(w, r)
		case UmgmtServiceUpdateUserProcedure:
			umgmtServiceUpdateUserHandler.ServeHTTP(w, r)
		case UmgmtServiceGetInventoryProcedure:
			umgmtServiceGetInventoryHandler.ServeHTTP(w, r)
		case UmgmtServiceGetMachineInfoProcedure:
			umgmtServiceGetMachineInfoHandler.ServeHTTP(w, r)
		case UmgmtServiceGetMachineStateProcedure:
			umgmtServiceGetMachineStateHandler.ServeHTTP(w, r)
		case UmgmtServiceChangeMachineStateProcedure:
			umgmtServiceChangeMachineStateHandler.ServeHTTP(w, r)
		case UmgmtServiceGetSensorListProcedure:
			umgmtServiceGetSensorListHandler.ServeHTTP(w, r)
		case UmgmtServiceGetSensorDataProcedure:
			umgmtServiceGetSensorDataHandler.ServeHTTP(w, r)
		case UmgmtServiceStreamHostConsoleProcedure:
			umgmtServiceStreamHostConsoleHandler.ServeHTTP(w, r)
		case UmgmtServiceConfigureThermalSetPointsProcedure:
			umgmtServiceConfigureThermalSetPointsHandler.ServeHTTP(w, r)
		case UmgmtServiceConfigureThermalFanProfilesProcedure:
			umgmtServiceConfigureThermalFanProfilesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUmgmtServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUmgmtServiceHandler struct{}

func (UnimplementedUmgmtServiceHandler) GetUsers(context.Context, *connect.Request[v1alpha1.GetUsersRequest]) (*connect.Response[v1alpha1.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.GetUsers is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) GetUserInfo(context.Context, *connect.Request[v1alpha1.GetUserInfoRequest]) (*connect.Response[v1alpha1.GetUserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.GetUserInfo is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) UpdateUser(context.Context, *connect.Request[v1alpha1.UpdateUserRequest]) (*connect.Response[v1alpha1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.UpdateUser is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) GetInventory(context.Context, *connect.Request[v1alpha1.GetInventoryRequest]) (*connect.Response[v1alpha1.GetInventoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.GetInventory is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) GetMachineInfo(context.Context, *connect.Request[v1alpha1.GetMachineInfoRequest]) (*connect.Response[v1alpha1.GetMachineInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.GetMachineInfo is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) GetMachineState(context.Context, *connect.Request[v1alpha1.GetMachineStateRequest]) (*connect.Response[v1alpha1.GetMachineStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.GetMachineState is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) ChangeMachineState(context.Context, *connect.Request[v1alpha1.ChangeMachineStateRequest]) (*connect.Response[v1alpha1.ChangeMachineStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.ChangeMachineState is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) GetSensorList(context.Context, *connect.Request[v1alpha1.GetSensorListRequest]) (*connect.Response[v1alpha1.GetSensorListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.GetSensorList is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) GetSensorData(context.Context, *connect.Request[v1alpha1.GetSensorDataRequest]) (*connect.Response[v1alpha1.GetSensorDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.GetSensorData is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) StreamHostConsole(context.Context, *connect.BidiStream[v1alpha1.StreamHostConsoleRequest, v1alpha1.StreamHostConsoleResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.StreamHostConsole is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) ConfigureThermalSetPoints(context.Context, *connect.Request[v1alpha1.ConfigureThermalSetPointsRequest]) (*connect.Response[v1alpha1.ConfigureThermalSetPointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.ConfigureThermalSetPoints is not implemented"))
}

func (UnimplementedUmgmtServiceHandler) ConfigureThermalFanProfiles(context.Context, *connect.Request[v1alpha1.ConfigureThermalFanProfilesRequest]) (*connect.Response[v1alpha1.ConfigureThermalFanProfilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("umgmt.v1alpha1.UmgmtService.ConfigureThermalFanProfiles is not implemented"))
}
