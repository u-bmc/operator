// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file umgmt/v1alpha1/umgmt.proto (package umgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum umgmt.v1alpha1.Status
 */
export enum Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: STATUS_FAILURE = 2;
   */
  FAILURE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Status)
proto3.util.setEnumType(Status, "umgmt.v1alpha1.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_SUCCESS" },
  { no: 2, name: "STATUS_FAILURE" },
]);

/**
 * @generated from enum umgmt.v1alpha1.Role
 */
export enum Role {
  /**
   * @generated from enum value: ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROLE_DEUBG = 1;
   */
  DEUBG = 1,

  /**
   * @generated from enum value: ROLE_ADMIN = 2;
   */
  ADMIN = 2,

  /**
   * @generated from enum value: ROLE_USER = 3;
   */
  USER = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Role)
proto3.util.setEnumType(Role, "umgmt.v1alpha1.Role", [
  { no: 0, name: "ROLE_UNSPECIFIED" },
  { no: 1, name: "ROLE_DEUBG" },
  { no: 2, name: "ROLE_ADMIN" },
  { no: 3, name: "ROLE_USER" },
]);

/**
 * @generated from enum umgmt.v1alpha1.State
 */
export enum State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATE_ON = 1;
   */
  ON = 1,

  /**
   * @generated from enum value: STATE_OFF = 2;
   */
  OFF = 2,

  /**
   * @generated from enum value: STATE_SUSPENDED = 3;
   */
  SUSPENDED = 3,

  /**
   * @generated from enum value: STATE_HIBERNATED = 4;
   */
  HIBERNATED = 4,

  /**
   * @generated from enum value: STATE_UNKNOWN = 5;
   */
  UNKNOWN = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(State)
proto3.util.setEnumType(State, "umgmt.v1alpha1.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_ON" },
  { no: 2, name: "STATE_OFF" },
  { no: 3, name: "STATE_SUSPENDED" },
  { no: 4, name: "STATE_HIBERNATED" },
  { no: 5, name: "STATE_UNKNOWN" },
]);

/**
 * @generated from enum umgmt.v1alpha1.FanProfile
 */
export enum FanProfile {
  /**
   * @generated from enum value: FAN_PROFILE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FAN_PROFILE_SILENT = 1;
   */
  SILENT = 1,

  /**
   * @generated from enum value: FAN_PROFILE_BALANCED = 2;
   */
  BALANCED = 2,

  /**
   * @generated from enum value: FAN_PROFILE_PERFORMANCE = 3;
   */
  PERFORMANCE = 3,

  /**
   * @generated from enum value: FAN_PROFILE_FULL_SPEED = 4;
   */
  FULL_SPEED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(FanProfile)
proto3.util.setEnumType(FanProfile, "umgmt.v1alpha1.FanProfile", [
  { no: 0, name: "FAN_PROFILE_UNSPECIFIED" },
  { no: 1, name: "FAN_PROFILE_SILENT" },
  { no: 2, name: "FAN_PROFILE_BALANCED" },
  { no: 3, name: "FAN_PROFILE_PERFORMANCE" },
  { no: 4, name: "FAN_PROFILE_FULL_SPEED" },
]);

/**
 * @generated from message umgmt.v1alpha1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: umgmt.v1alpha1.Role role = 4;
   */
  role = Role.UNSPECIFIED;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "enum", T: proto3.getEnumType(Role) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetUsersRequest
 */
export class GetUsersRequest extends Message<GetUsersRequest> {
  constructor(data?: PartialMessage<GetUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined, b: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined): boolean {
    return proto3.util.equals(GetUsersRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetUsersResponse
 */
export class GetUsersResponse extends Message<GetUsersResponse> {
  /**
   * @generated from field: repeated umgmt.v1alpha1.User users = 1;
   */
  users: User[] = [];

  /**
   * @generated from field: umgmt.v1alpha1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<GetUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined, b: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined): boolean {
    return proto3.util.equals(GetUsersResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetUserInfoRequest
 */
export class GetUserInfoRequest extends Message<GetUserInfoRequest> {
  /**
   * @generated from field: string user_name = 1;
   */
  userName = "";

  constructor(data?: PartialMessage<GetUserInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetUserInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserInfoRequest {
    return new GetUserInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserInfoRequest {
    return new GetUserInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserInfoRequest {
    return new GetUserInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserInfoRequest | PlainMessage<GetUserInfoRequest> | undefined, b: GetUserInfoRequest | PlainMessage<GetUserInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetUserInfoRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetUserInfoResponse
 */
export class GetUserInfoResponse extends Message<GetUserInfoResponse> {
  /**
   * @generated from field: umgmt.v1alpha1.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: umgmt.v1alpha1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<GetUserInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetUserInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserInfoResponse {
    return new GetUserInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserInfoResponse {
    return new GetUserInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserInfoResponse {
    return new GetUserInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserInfoResponse | PlainMessage<GetUserInfoResponse> | undefined, b: GetUserInfoResponse | PlainMessage<GetUserInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetUserInfoResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.UpdateUserRequest
 */
export class UpdateUserRequest extends Message<UpdateUserRequest> {
  /**
   * @generated from field: umgmt.v1alpha1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UpdateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.UpdateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined, b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.UpdateUserResponse
 */
export class UpdateUserResponse extends Message<UpdateUserResponse> {
  /**
   * @generated from field: umgmt.v1alpha1.Status status = 1;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.UpdateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined, b: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.Location
 */
export class Location extends Message<Location> {
  /**
   * @generated from field: string building = 1;
   */
  building = "";

  /**
   * @generated from field: string room = 2;
   */
  room = "";

  /**
   * @generated from field: string rack = 3;
   */
  rack = "";

  /**
   * @generated from field: string slot = 4;
   */
  slot = "";

  constructor(data?: PartialMessage<Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "building", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rack", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "slot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location {
    return new Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJsonString(jsonString, options);
  }

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean {
    return proto3.util.equals(Location, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.Machine
 */
export class Machine extends Message<Machine> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string hostname = 2;
   */
  hostname = "";

  /**
   * @generated from field: string ip_address = 3;
   */
  ipAddress = "";

  /**
   * @generated from field: string serial_number = 4;
   */
  serialNumber = "";

  /**
   * @generated from field: string product_name = 5;
   */
  productName = "";

  /**
   * @generated from field: string manufacturer = 6;
   */
  manufacturer = "";

  /**
   * @generated from field: string asset_tag = 7;
   */
  assetTag = "";

  /**
   * @generated from field: umgmt.v1alpha1.Location location = 8;
   */
  location?: Location;

  constructor(data?: PartialMessage<Machine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.Machine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "serial_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "product_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "manufacturer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "asset_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "location", kind: "message", T: Location },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Machine {
    return new Machine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Machine {
    return new Machine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Machine {
    return new Machine().fromJsonString(jsonString, options);
  }

  static equals(a: Machine | PlainMessage<Machine> | undefined, b: Machine | PlainMessage<Machine> | undefined): boolean {
    return proto3.util.equals(Machine, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.Component
 */
export class Component extends Message<Component> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string serial_number = 2;
   */
  serialNumber = "";

  /**
   * @generated from field: string product_name = 3;
   */
  productName = "";

  /**
   * @generated from field: string manufacturer = 4;
   */
  manufacturer = "";

  /**
   * @generated from field: string asset_tag = 5;
   */
  assetTag = "";

  constructor(data?: PartialMessage<Component>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.Component";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "serial_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "manufacturer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "asset_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Component {
    return new Component().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Component {
    return new Component().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Component {
    return new Component().fromJsonString(jsonString, options);
  }

  static equals(a: Component | PlainMessage<Component> | undefined, b: Component | PlainMessage<Component> | undefined): boolean {
    return proto3.util.equals(Component, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.Inventory
 */
export class Inventory extends Message<Inventory> {
  /**
   * @generated from field: repeated umgmt.v1alpha1.Machine machines = 1;
   */
  machines: Machine[] = [];

  /**
   * @generated from field: repeated umgmt.v1alpha1.Component components = 2;
   */
  components: Component[] = [];

  constructor(data?: PartialMessage<Inventory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.Inventory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "machines", kind: "message", T: Machine, repeated: true },
    { no: 2, name: "components", kind: "message", T: Component, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Inventory {
    return new Inventory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Inventory {
    return new Inventory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Inventory {
    return new Inventory().fromJsonString(jsonString, options);
  }

  static equals(a: Inventory | PlainMessage<Inventory> | undefined, b: Inventory | PlainMessage<Inventory> | undefined): boolean {
    return proto3.util.equals(Inventory, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetInventoryRequest
 */
export class GetInventoryRequest extends Message<GetInventoryRequest> {
  constructor(data?: PartialMessage<GetInventoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetInventoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInventoryRequest {
    return new GetInventoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInventoryRequest {
    return new GetInventoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInventoryRequest {
    return new GetInventoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInventoryRequest | PlainMessage<GetInventoryRequest> | undefined, b: GetInventoryRequest | PlainMessage<GetInventoryRequest> | undefined): boolean {
    return proto3.util.equals(GetInventoryRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetInventoryResponse
 */
export class GetInventoryResponse extends Message<GetInventoryResponse> {
  /**
   * @generated from field: umgmt.v1alpha1.Inventory inventory = 1;
   */
  inventory?: Inventory;

  /**
   * @generated from field: umgmt.v1alpha1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<GetInventoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetInventoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inventory", kind: "message", T: Inventory },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInventoryResponse {
    return new GetInventoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInventoryResponse {
    return new GetInventoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInventoryResponse {
    return new GetInventoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInventoryResponse | PlainMessage<GetInventoryResponse> | undefined, b: GetInventoryResponse | PlainMessage<GetInventoryResponse> | undefined): boolean {
    return proto3.util.equals(GetInventoryResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetMachineInfoRequest
 */
export class GetMachineInfoRequest extends Message<GetMachineInfoRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetMachineInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetMachineInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMachineInfoRequest {
    return new GetMachineInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMachineInfoRequest {
    return new GetMachineInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMachineInfoRequest {
    return new GetMachineInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMachineInfoRequest | PlainMessage<GetMachineInfoRequest> | undefined, b: GetMachineInfoRequest | PlainMessage<GetMachineInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetMachineInfoRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetMachineInfoResponse
 */
export class GetMachineInfoResponse extends Message<GetMachineInfoResponse> {
  /**
   * @generated from field: umgmt.v1alpha1.Machine machine = 1;
   */
  machine?: Machine;

  /**
   * @generated from field: umgmt.v1alpha1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<GetMachineInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetMachineInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "machine", kind: "message", T: Machine },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMachineInfoResponse {
    return new GetMachineInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMachineInfoResponse {
    return new GetMachineInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMachineInfoResponse {
    return new GetMachineInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMachineInfoResponse | PlainMessage<GetMachineInfoResponse> | undefined, b: GetMachineInfoResponse | PlainMessage<GetMachineInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetMachineInfoResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetMachineStateRequest
 */
export class GetMachineStateRequest extends Message<GetMachineStateRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetMachineStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetMachineStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMachineStateRequest {
    return new GetMachineStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMachineStateRequest {
    return new GetMachineStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMachineStateRequest {
    return new GetMachineStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMachineStateRequest | PlainMessage<GetMachineStateRequest> | undefined, b: GetMachineStateRequest | PlainMessage<GetMachineStateRequest> | undefined): boolean {
    return proto3.util.equals(GetMachineStateRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetMachineStateResponse
 */
export class GetMachineStateResponse extends Message<GetMachineStateResponse> {
  /**
   * @generated from field: umgmt.v1alpha1.State state = 1;
   */
  state = State.UNSPECIFIED;

  /**
   * @generated from field: umgmt.v1alpha1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<GetMachineStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetMachineStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMachineStateResponse {
    return new GetMachineStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMachineStateResponse {
    return new GetMachineStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMachineStateResponse {
    return new GetMachineStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMachineStateResponse | PlainMessage<GetMachineStateResponse> | undefined, b: GetMachineStateResponse | PlainMessage<GetMachineStateResponse> | undefined): boolean {
    return proto3.util.equals(GetMachineStateResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.ChangeMachineStateRequest
 */
export class ChangeMachineStateRequest extends Message<ChangeMachineStateRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: umgmt.v1alpha1.State state = 2;
   */
  state = State.UNSPECIFIED;

  constructor(data?: PartialMessage<ChangeMachineStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.ChangeMachineStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(State) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMachineStateRequest {
    return new ChangeMachineStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMachineStateRequest {
    return new ChangeMachineStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMachineStateRequest {
    return new ChangeMachineStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMachineStateRequest | PlainMessage<ChangeMachineStateRequest> | undefined, b: ChangeMachineStateRequest | PlainMessage<ChangeMachineStateRequest> | undefined): boolean {
    return proto3.util.equals(ChangeMachineStateRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.ChangeMachineStateResponse
 */
export class ChangeMachineStateResponse extends Message<ChangeMachineStateResponse> {
  /**
   * @generated from field: umgmt.v1alpha1.Status status = 1;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<ChangeMachineStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.ChangeMachineStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeMachineStateResponse {
    return new ChangeMachineStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeMachineStateResponse {
    return new ChangeMachineStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeMachineStateResponse {
    return new ChangeMachineStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeMachineStateResponse | PlainMessage<ChangeMachineStateResponse> | undefined, b: ChangeMachineStateResponse | PlainMessage<ChangeMachineStateResponse> | undefined): boolean {
    return proto3.util.equals(ChangeMachineStateResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.Sensor
 */
export class Sensor extends Message<Sensor> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: string units = 4;
   */
  units = "";

  /**
   * @generated from field: string value = 5;
   */
  value = "";

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Sensor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.Sensor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "units", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sensor {
    return new Sensor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sensor {
    return new Sensor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sensor {
    return new Sensor().fromJsonString(jsonString, options);
  }

  static equals(a: Sensor | PlainMessage<Sensor> | undefined, b: Sensor | PlainMessage<Sensor> | undefined): boolean {
    return proto3.util.equals(Sensor, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetSensorListRequest
 */
export class GetSensorListRequest extends Message<GetSensorListRequest> {
  constructor(data?: PartialMessage<GetSensorListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetSensorListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorListRequest {
    return new GetSensorListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorListRequest {
    return new GetSensorListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorListRequest {
    return new GetSensorListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorListRequest | PlainMessage<GetSensorListRequest> | undefined, b: GetSensorListRequest | PlainMessage<GetSensorListRequest> | undefined): boolean {
    return proto3.util.equals(GetSensorListRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetSensorListResponse
 */
export class GetSensorListResponse extends Message<GetSensorListResponse> {
  /**
   * @generated from field: repeated umgmt.v1alpha1.Sensor sensors = 1;
   */
  sensors: Sensor[] = [];

  /**
   * @generated from field: umgmt.v1alpha1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<GetSensorListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetSensorListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensors", kind: "message", T: Sensor, repeated: true },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorListResponse {
    return new GetSensorListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorListResponse {
    return new GetSensorListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorListResponse {
    return new GetSensorListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorListResponse | PlainMessage<GetSensorListResponse> | undefined, b: GetSensorListResponse | PlainMessage<GetSensorListResponse> | undefined): boolean {
    return proto3.util.equals(GetSensorListResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetSensorDataRequest
 */
export class GetSensorDataRequest extends Message<GetSensorDataRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetSensorDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetSensorDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorDataRequest {
    return new GetSensorDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorDataRequest {
    return new GetSensorDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorDataRequest {
    return new GetSensorDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorDataRequest | PlainMessage<GetSensorDataRequest> | undefined, b: GetSensorDataRequest | PlainMessage<GetSensorDataRequest> | undefined): boolean {
    return proto3.util.equals(GetSensorDataRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.GetSensorDataResponse
 */
export class GetSensorDataResponse extends Message<GetSensorDataResponse> {
  /**
   * @generated from field: umgmt.v1alpha1.Sensor sensor = 1;
   */
  sensor?: Sensor;

  /**
   * @generated from field: umgmt.v1alpha1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<GetSensorDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.GetSensorDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor", kind: "message", T: Sensor },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorDataResponse {
    return new GetSensorDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorDataResponse {
    return new GetSensorDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorDataResponse {
    return new GetSensorDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorDataResponse | PlainMessage<GetSensorDataResponse> | undefined, b: GetSensorDataResponse | PlainMessage<GetSensorDataResponse> | undefined): boolean {
    return proto3.util.equals(GetSensorDataResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.StreamHostConsoleRequest
 */
export class StreamHostConsoleRequest extends Message<StreamHostConsoleRequest> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: umgmt.v1alpha1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<StreamHostConsoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.StreamHostConsoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamHostConsoleRequest {
    return new StreamHostConsoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamHostConsoleRequest {
    return new StreamHostConsoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamHostConsoleRequest {
    return new StreamHostConsoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamHostConsoleRequest | PlainMessage<StreamHostConsoleRequest> | undefined, b: StreamHostConsoleRequest | PlainMessage<StreamHostConsoleRequest> | undefined): boolean {
    return proto3.util.equals(StreamHostConsoleRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.StreamHostConsoleResponse
 */
export class StreamHostConsoleResponse extends Message<StreamHostConsoleResponse> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: umgmt.v1alpha1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<StreamHostConsoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.StreamHostConsoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamHostConsoleResponse {
    return new StreamHostConsoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamHostConsoleResponse {
    return new StreamHostConsoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamHostConsoleResponse {
    return new StreamHostConsoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamHostConsoleResponse | PlainMessage<StreamHostConsoleResponse> | undefined, b: StreamHostConsoleResponse | PlainMessage<StreamHostConsoleResponse> | undefined): boolean {
    return proto3.util.equals(StreamHostConsoleResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.ConfigureThermalSetPointsRequest
 */
export class ConfigureThermalSetPointsRequest extends Message<ConfigureThermalSetPointsRequest> {
  /**
   * @generated from field: int32 cpu_setpoint = 1;
   */
  cpuSetpoint = 0;

  constructor(data?: PartialMessage<ConfigureThermalSetPointsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.ConfigureThermalSetPointsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpu_setpoint", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigureThermalSetPointsRequest {
    return new ConfigureThermalSetPointsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigureThermalSetPointsRequest {
    return new ConfigureThermalSetPointsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigureThermalSetPointsRequest {
    return new ConfigureThermalSetPointsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigureThermalSetPointsRequest | PlainMessage<ConfigureThermalSetPointsRequest> | undefined, b: ConfigureThermalSetPointsRequest | PlainMessage<ConfigureThermalSetPointsRequest> | undefined): boolean {
    return proto3.util.equals(ConfigureThermalSetPointsRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.ConfigureThermalSetPointsResponse
 */
export class ConfigureThermalSetPointsResponse extends Message<ConfigureThermalSetPointsResponse> {
  /**
   * @generated from field: umgmt.v1alpha1.Status status = 1;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<ConfigureThermalSetPointsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.ConfigureThermalSetPointsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigureThermalSetPointsResponse {
    return new ConfigureThermalSetPointsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigureThermalSetPointsResponse {
    return new ConfigureThermalSetPointsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigureThermalSetPointsResponse {
    return new ConfigureThermalSetPointsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigureThermalSetPointsResponse | PlainMessage<ConfigureThermalSetPointsResponse> | undefined, b: ConfigureThermalSetPointsResponse | PlainMessage<ConfigureThermalSetPointsResponse> | undefined): boolean {
    return proto3.util.equals(ConfigureThermalSetPointsResponse, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.ConfigureThermalFanProfilesRequest
 */
export class ConfigureThermalFanProfilesRequest extends Message<ConfigureThermalFanProfilesRequest> {
  /**
   * @generated from field: umgmt.v1alpha1.FanProfile fan_profile = 1;
   */
  fanProfile = FanProfile.UNSPECIFIED;

  constructor(data?: PartialMessage<ConfigureThermalFanProfilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.ConfigureThermalFanProfilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fan_profile", kind: "enum", T: proto3.getEnumType(FanProfile) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigureThermalFanProfilesRequest {
    return new ConfigureThermalFanProfilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigureThermalFanProfilesRequest {
    return new ConfigureThermalFanProfilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigureThermalFanProfilesRequest {
    return new ConfigureThermalFanProfilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigureThermalFanProfilesRequest | PlainMessage<ConfigureThermalFanProfilesRequest> | undefined, b: ConfigureThermalFanProfilesRequest | PlainMessage<ConfigureThermalFanProfilesRequest> | undefined): boolean {
    return proto3.util.equals(ConfigureThermalFanProfilesRequest, a, b);
  }
}

/**
 * @generated from message umgmt.v1alpha1.ConfigureThermalFanProfilesResponse
 */
export class ConfigureThermalFanProfilesResponse extends Message<ConfigureThermalFanProfilesResponse> {
  /**
   * @generated from field: umgmt.v1alpha1.Status status = 1;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<ConfigureThermalFanProfilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "umgmt.v1alpha1.ConfigureThermalFanProfilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigureThermalFanProfilesResponse {
    return new ConfigureThermalFanProfilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigureThermalFanProfilesResponse {
    return new ConfigureThermalFanProfilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigureThermalFanProfilesResponse {
    return new ConfigureThermalFanProfilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigureThermalFanProfilesResponse | PlainMessage<ConfigureThermalFanProfilesResponse> | undefined, b: ConfigureThermalFanProfilesResponse | PlainMessage<ConfigureThermalFanProfilesResponse> | undefined): boolean {
    return proto3.util.equals(ConfigureThermalFanProfilesResponse, a, b);
  }
}

