// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ipc/v1alpha1/ipc.proto

package ipcv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/u-bmc/operator/api/gen/ipc/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// IPCServiceName is the fully-qualified name of the IPCService service.
	IPCServiceName = "ipc.v1alpha1.IPCService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IPCServicePublishProcedure is the fully-qualified name of the IPCService's Publish RPC.
	IPCServicePublishProcedure = "/ipc.v1alpha1.IPCService/Publish"
	// IPCServiceSubscribeProcedure is the fully-qualified name of the IPCService's Subscribe RPC.
	IPCServiceSubscribeProcedure = "/ipc.v1alpha1.IPCService/Subscribe"
)

// IPCServiceClient is a client for the ipc.v1alpha1.IPCService service.
type IPCServiceClient interface {
	Publish(context.Context, *connect.Request[v1alpha1.PublishRequest]) (*connect.Response[v1alpha1.PublishResponse], error)
	Subscribe(context.Context, *connect.Request[v1alpha1.SubscribeRequest]) (*connect.ServerStreamForClient[v1alpha1.SubscribeResponse], error)
}

// NewIPCServiceClient constructs a client for the ipc.v1alpha1.IPCService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIPCServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IPCServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &iPCServiceClient{
		publish: connect.NewClient[v1alpha1.PublishRequest, v1alpha1.PublishResponse](
			httpClient,
			baseURL+IPCServicePublishProcedure,
			opts...,
		),
		subscribe: connect.NewClient[v1alpha1.SubscribeRequest, v1alpha1.SubscribeResponse](
			httpClient,
			baseURL+IPCServiceSubscribeProcedure,
			opts...,
		),
	}
}

// iPCServiceClient implements IPCServiceClient.
type iPCServiceClient struct {
	publish   *connect.Client[v1alpha1.PublishRequest, v1alpha1.PublishResponse]
	subscribe *connect.Client[v1alpha1.SubscribeRequest, v1alpha1.SubscribeResponse]
}

// Publish calls ipc.v1alpha1.IPCService.Publish.
func (c *iPCServiceClient) Publish(ctx context.Context, req *connect.Request[v1alpha1.PublishRequest]) (*connect.Response[v1alpha1.PublishResponse], error) {
	return c.publish.CallUnary(ctx, req)
}

// Subscribe calls ipc.v1alpha1.IPCService.Subscribe.
func (c *iPCServiceClient) Subscribe(ctx context.Context, req *connect.Request[v1alpha1.SubscribeRequest]) (*connect.ServerStreamForClient[v1alpha1.SubscribeResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// IPCServiceHandler is an implementation of the ipc.v1alpha1.IPCService service.
type IPCServiceHandler interface {
	Publish(context.Context, *connect.Request[v1alpha1.PublishRequest]) (*connect.Response[v1alpha1.PublishResponse], error)
	Subscribe(context.Context, *connect.Request[v1alpha1.SubscribeRequest], *connect.ServerStream[v1alpha1.SubscribeResponse]) error
}

// NewIPCServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIPCServiceHandler(svc IPCServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	iPCServicePublishHandler := connect.NewUnaryHandler(
		IPCServicePublishProcedure,
		svc.Publish,
		opts...,
	)
	iPCServiceSubscribeHandler := connect.NewServerStreamHandler(
		IPCServiceSubscribeProcedure,
		svc.Subscribe,
		opts...,
	)
	return "/ipc.v1alpha1.IPCService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IPCServicePublishProcedure:
			iPCServicePublishHandler.ServeHTTP(w, r)
		case IPCServiceSubscribeProcedure:
			iPCServiceSubscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIPCServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIPCServiceHandler struct{}

func (UnimplementedIPCServiceHandler) Publish(context.Context, *connect.Request[v1alpha1.PublishRequest]) (*connect.Response[v1alpha1.PublishResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ipc.v1alpha1.IPCService.Publish is not implemented"))
}

func (UnimplementedIPCServiceHandler) Subscribe(context.Context, *connect.Request[v1alpha1.SubscribeRequest], *connect.ServerStream[v1alpha1.SubscribeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ipc.v1alpha1.IPCService.Subscribe is not implemented"))
}
