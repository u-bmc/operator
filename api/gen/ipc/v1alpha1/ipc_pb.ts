// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file ipc/v1alpha1/ipc.proto (package ipc.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum ipc.v1alpha1.Status
 */
export enum Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: STATUS_FAILURE = 2;
   */
  FAILURE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Status)
proto3.util.setEnumType(Status, "ipc.v1alpha1.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_SUCCESS" },
  { no: 2, name: "STATUS_FAILURE" },
]);

/**
 * @generated from message ipc.v1alpha1.PublishRequest
 */
export class PublishRequest extends Message<PublishRequest> {
  /**
   * @generated from field: string topic = 1;
   */
  topic = "";

  /**
   * @generated from field: string publisher_name = 2;
   */
  publisherName = "";

  /**
   * @generated from field: string publisher_id = 3;
   */
  publisherId = "";

  /**
   * @generated from field: repeated google.protobuf.Struct data = 4;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<PublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ipc.v1alpha1.PublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "publisher_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "publisher_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRequest {
    return new PublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRequest {
    return new PublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRequest {
    return new PublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRequest | PlainMessage<PublishRequest> | undefined, b: PublishRequest | PlainMessage<PublishRequest> | undefined): boolean {
    return proto3.util.equals(PublishRequest, a, b);
  }
}

/**
 * @generated from message ipc.v1alpha1.PublishResponse
 */
export class PublishResponse extends Message<PublishResponse> {
  /**
   * @generated from field: ipc.v1alpha1.Status status = 1;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<PublishResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ipc.v1alpha1.PublishResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishResponse {
    return new PublishResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishResponse {
    return new PublishResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishResponse {
    return new PublishResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishResponse | PlainMessage<PublishResponse> | undefined, b: PublishResponse | PlainMessage<PublishResponse> | undefined): boolean {
    return proto3.util.equals(PublishResponse, a, b);
  }
}

/**
 * @generated from message ipc.v1alpha1.SubscribeRequest
 */
export class SubscribeRequest extends Message<SubscribeRequest> {
  /**
   * @generated from field: string topic = 1;
   */
  topic = "";

  /**
   * @generated from field: string subscriber_name = 2;
   */
  subscriberName = "";

  /**
   * @generated from field: string subscriber_id = 3;
   */
  subscriberId = "";

  constructor(data?: PartialMessage<SubscribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ipc.v1alpha1.SubscribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subscriber_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subscriber_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined, b: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeRequest, a, b);
  }
}

/**
 * @generated from message ipc.v1alpha1.SubscribeResponse
 */
export class SubscribeResponse extends Message<SubscribeResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: string topic = 2;
   */
  topic = "";

  /**
   * @generated from field: string publisher_name = 3;
   */
  publisherName = "";

  /**
   * @generated from field: string publisher_id = 4;
   */
  publisherId = "";

  /**
   * @generated from field: string message_id = 5;
   */
  messageId = "";

  /**
   * @generated from field: repeated google.protobuf.Struct data = 6;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<SubscribeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ipc.v1alpha1.SubscribeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "publisher_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "publisher_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeResponse {
    return new SubscribeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeResponse {
    return new SubscribeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeResponse {
    return new SubscribeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeResponse | PlainMessage<SubscribeResponse> | undefined, b: SubscribeResponse | PlainMessage<SubscribeResponse> | undefined): boolean {
    return proto3.util.equals(SubscribeResponse, a, b);
  }
}

